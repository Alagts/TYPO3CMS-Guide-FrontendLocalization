
Руководство по локализации внешнего интерфейса
Ключ расширения: doc_l10nguide
Язык: ru
Ключевые слова: forAdmins, forDevelopers, forIntermediates
Авторские права 2000-2010, Kasper Sk?rh?j, <kasperYYYY@typo3.com>

Этот документ публикуется под Open Content License
доступной на http://www.opencontent.org/opl.shtml

Содержимое этого документа относится к TYPO3 
- GNU/GPL CMS/Framework доступной на www.typo3.org

Содержание
Руководство по локализации внешнего интерфейса	1
Введение	3
Основная настройка локализуемых сайтов	4
Наборы символов (кодировка)	4
Настройка языков	5
Определение языкового флага "по умолчанию"	6
Перевод страниц	6
Обзор локализации дерева страниц	7
Веб>Список Просмотр переводов	11
Настройка TypoScript	11
Режим локализации: “config.sys_language_mode”	13
llXML (locallang-XML) в расширениях и TypoScript	15
Меню выбора языка	17
Локализация содержимого	19
Связь содержимого	19
FlexForms	27
FlexForm – элементы контейнеры	36
Настройки наследования (Inheritance, специально для TemplaVoil?!)	42
Объекты шаблона локализации в TemplaVoil?	44
Модуль Страница из TemplaVoil?	45
TemplaVoil?: лучшая практика	57
TemplaVoil?: технология для переводчика	58
Поддержка локализации со стороны ядра	62
TCA, TCEmain, TCEforms	62
Права доступа	63
Расширения	65
realurl	65
rlmp_language_detection	65
l10nmgr	65
Список для реализации возможностей локализации	66

Введение
Создать сайт под управлением TYPO3 на нескольких языках можно различными способами,что не удивительно. К сожалению, охватить сразу все параметры сложно, хотя они описаны, применительно к своим контекстам. Но даже если Вы разбираетесь в предмете, все равно, желательно получить советы о том, как достичь нужного результата с минимальными усилиями.
В этом документе мы попытались собрать все, что известно о локализации сайтов в TYPO3. В идеале, хорошо было бы затронуть все параметры. Однако вам нельзя забывать о такой справочной документации, как TSref, TYPO3 Core API и т.п., где приведен точный и актуальный на данный момент синтаксис для всех упомянутых функций.
В этом документе рассматривается как классический дизайн, на основе столбцов, так и современный подход на основе TemplaVoil?.
Так как основной целью документа является сбор всех сведений о локализации, то подача материала может страдать некой несвязанностью. Позже, возможно будет сделан пересмотр и содержимое будет более связанным. Пока же это не было приоритетной задачей. С другой стороны, экспертом можете стать и Вы.
“Свободная” и “Связанная” парадигмы локализации в TemplaVoil?
В процессе создания этого документа, я понял, что это нужно было делать много лет назад, так как многие уже делали локализацию своих сайтов, но не столь эффективно, как было бы возможно. Это породило множество споров, так что в итоге мы поняли, что существует несколько подходов к возможности локализации сайтов. Так как множество существующих сайтов используют не рекомендуемый подход, мы решили ввести встроенную и настраиваемую поддержку, с возможностью обратной совместимости.
“Локализация” и “Перевод”
Для обозначения одного и того же зачастую используют два термина. Этот документ не исключение. Но вот, как я понимаю их разницу:
“Перевод” означает, что определенное сочетание слов переводится на другой язык. Другими словами, если имеется заголовок и изображение на языке по умолчанию, они же останутся и в переводе. Ни больше, ни меньше.
“Локализация” – более широкое понятие, означающее, что страница представлена на другом языке. Конечно же это означает и перевод информации на этот язык ("перевод"), но кроме того, это еще и альтернативные шаблоны, дополнительное сочетание содержимого, предназначенного для другой аудитории и т.п. Другими словами, может существовать другие заголовки и изображения, и даже их количество может отличаться от использованных на языке по умолчанию.
TYPO3 поддерживает оба типа подхода, но за такую гибкость нужно расплачиваться — знакомиться с документацией, чтобы найти лучший для существующего проекта подход!
Посвящение
Этот документ я хотел бы посвятить всем носителям английского языка, на протяжении многих лет пытавшихся ужиться с газиллионами моих документов, полных странных синтаксических нагромождений, и понимающих, что это привилегия неместных, вроде меня, в конце концов решившего общаться на иностранном языке по мере своих способностей.
- kasper
Основная настройка локализуемых сайтов
В этой главе собраны все основные требования для настройки локализуемых сайтов на TYPO3. Здесь показано, что делать с наборами символов, как определить страницы, требующие перевода, описан инструментарий внутреннего интерфейса для локализации, настройка TypoScript для желаемого режима локализации. Кроме того, здесь даны сведения о дополнительных возможностях, вроде файлов locallang-XML и перевода внешних дополнений.
Наборы символов (кодировка)
Для всех вновь создаваемых сайтов на TYPO3 рекомендуется установка глобального набора символов на UTF-8. Это производится указанием следующей строки в файле localconf.php вашего сайта:
$TYPO3_CONF_VARS['BE']['forceCharset'] = 'utf-8';
Разъяснение параметра “forceCharset”
Причина использования настройки “forceCharset” в том, что без ее указания во внутреннем интерфейсе будет использоваться набор символов, зависящий от языка, выбранного в настройках для внутреннего пользователя. Поэтому, скажем, что пользователь A работает во внутреннем интерфейсе на русском языке, а пользователь Б — на датском, при этом пользователь А будет вводит данных в кодировке “windows-1251”, а пользователь Б - “iso-8859-1”. Поскольку для хранящихся в TYPO3 данных кодировка не указана, это приведет к несовместимости с кодировкой базы данных.
Если же $TYPO3_CONF_VARS['BE']['forceCharset'] установлен, одна и та же кодировка используется во внутреннем интерфейсе для всех пользователей, независимо от выбранного для внутреннего интерфейса языка, а в базе данных будут храниться правильные данные. Но, так как “iso-8859-1” и “windows-1251” кодировки “несовместимые” (используют те же значения битов для разных символов), в качестве кодировки для этой настройки необходимо выбирать “utf-8”, так как она содержит наборы символов как русского, так и датского языков, впрочем, как и символы языков всего мира.
Вывод: использование utf-8 означает независимость хранящихся данных, когда можно хранить любой символ любого языка, не думая об используемых кодировках.
Примечание: $TYPO3_CONF_VARS['BE']['forceCharset'] в версиях TYPO3 до 4.5 по умолчанию не устанавливался по причинам обратной совместимости, но начиная с TYPO3 версии 4.5 используется по умолчанию во всех заново создаваемых сайтах, а в дальнейшем, при обновлении старых сайтов, использующих другую кодировку, это условие станет обязательным (для $TYPO3_CONF_VARS['BE']['forceCharset'] и $TYPO3_CONF_VARS['BE']['setDBinit']). Мастер обновления поможет в этом.
Кодировка во внешнем интерфейсе (дополнительно)
Значение “forceCharset” также автоматически будет использоваться во внешнем интерфейсе. Но настройки кодировки можно изменить через TypoScript. Имеется два параметра, “config.renderCharset” (не меняйте, если не знаете, что делаете) и “config.metaCharset”.
config.metaCharset определяет кодировку для выводимого HTML. Если здесь установлено значение, отличное от renderCharset / forceCharset, перед выводом все содержимое будет перекодировано, хотя внутренняя его обработка будет производиться в кодировке “renderCharset”. Это полезно в определенных случаях, вроде японских сайтов, где для вывода любят использовать что-то вроде кодировки “shift-jis”.
Если config.renderCharset != config.metaCharset (не идентичен), то следует позаботиться о нескольких вещах:
содержимое из “PHP_SCRIPT_EXT” не преобразуется (все остальное, включая USER_INT);
данные GET / POST автоматически преобразуются из metaCharset в renderCharset.
Длина поля базы данных
Если в качестве используемой кодировки выбрана utf-8, можно столкнуться с проблемой малой длины поля базы данных. Например, каждый китайский символ занимает три байта. При этом, если используется поле varchar(10), а введено 10 китайских символа, то сохранятся лишь три (так как они занимают 9 байт). В этом отношении, utf-8 немного сложно использовать, так как все ascii символы требуют лишь одного байта, в то время как специальные европейские символы обычно занимают два, а азиатские до трех байтов, некоторые же специфичные символы могут потребовать и 5-6 байт!
При использовании MySQL 4.1 и выше, можно настроить базу данных на использование UTF-8. Подробнее можно прочитать здесь:
http://dev.mysql.com/doc/refman/4.1/en/charset-unicode.html
Если же используется MySQL(либо взята другая БД), которая поддерживает UTF-8, можно воспользоваться следующим:
Так как база данных не поддерживает utf-8, то varchar(10) значит “сохранение 10 utf-8 символов, независимо от длины в байта”, и предлагается следующая настройка TYPO3, заботящаяся об этом:
$TYPO3_CONF_VARS['SYS']['multiplyDBfieldSize'] = '3';
Такая настройка автоматически изменяет все поля varchar(10) в “varchar(30)”. После изменения этого значения, необходимо воспользоваться Install Tool, “Database Analyzer” для изменения (alter) всех полей в таблицах.
Настройка языков
Следующая необходимая установка — языки, на которые должен быть локализован сайт. Это дополнительные к языку сайта "по умолчанию". Язык по умолчанию зависит от сделанных установок.
Системные языки добавляются на корневом уровне дерева страниц. В этом руководстве я добавлю два языка, датский и русский.

Запись для русского языка выглядит так:
Теперь, при локализации страниц и их содержимого, в TYPO3 будет присутствовать параметр, позволяющий выбрать между “По умолчанию”, “Датский” и “Русский”. Иллюстрация из модуля Веб>Список (для этого внизу необходимо установить флажок "Просмотр переводов"):

Определение языкового флага "по умолчанию"
Если необходимо определить название языка по умолчанию и значок его флага, можно сделать это для ветви дерева страниц, в настройке Tsconfig страницы для корня сайта:

Эта настройка, например, используется в модулях Веб>Страница, Веб>Список и TemplaVoil? Страница.
Перевод страниц
Если необходимо перевести страницу в дереве страниц, сначала необходимо создать на этой странице запись "Альтернативный язык страницы". В ней находятся переводы для свойств записи страницы:


После того, как такая запись сделана, становится возможным переводить содержимое страницы на определенный в ней язык. Запись Альтернативный язык страницы определяет, имеет ли страница перевод на определенный язык, или нет.
В модуле Веб>Список это выглядит так:
Обзор локализации дерева страниц
Возможно получить и полное представление о переводах, сделанных в дереве страниц, через модуль Веб>Инфо, выбрав в нем раздел "Обзор локализации":
Все записи на зеленом фоне показывают доступные переводы каждой записи на странице для каждого из определенных языков сайта. Записи на сером фоне означают отсутствие перевода, но с возможностью доступа к странице, если выбран определенный язык. Из этого модуля можно очень быстро создавать новые переводы (используя флажки).
Сокрытие страниц без переводов
Если для страницы не существует перевод, по умолчанию она будет присутствовать в меню сайта, при выборе определенного переводного языка во внешнем интерфейсе. Здесь страница "Exemples" все еще показана в меню на языке по умолчанию (английском), при отображении сайта на языке перевода — русском:
Если в свойствах страницы, на вкладке Поведение установить флажок "Спрятать страницу, если нет перевода данного языка", этого можно избежать:

Так изменится Обзор локализации:

Здесь сразу видно, что при просмотре сайта на русском, страница "Exemples" не будет доступна — такие страницы отображаются на розовом фоне. А из меню сайта на русском языке эта страница исчезнет.
Попытка вывести страницу "Exemples", указав ее id в URL, также приведет к ошибке.
Сокрытие стандартного языка страницы
Если же нужно, чтобы страница была доступна только на языке перевода, то страницу в дереве страниц на языке по умолчанию все же необходимо будет создать, она будет служить лишь шаблоном. Настройка же нужных нам свойств доступна все в тех же свойствах этой страницы, где все на той же вкладке Поведение нужно установить флажок "Спрятать стандартный язык страницы":

В Обзоре локализации это выглядит следующим образом:

В меню сайта произойдет следующее,
на русском:

на английском (по умолчанию):

Попытка доступа к странице "Welcome to TYPO3" указав ее id в URL на языке по умолчанию, приведет к ошибке.
Сокрытие страниц на языке по умолчанию, хотя и редкая вещь, но имеет право на существование, например, если тема страницы или раздела имеет смысл лишь на одном из альтернативных языков. Особенно если язык сайта — это не только перевод, но и подраздел компании в определенном контексте.
Обращение настроек для скрытия переводов
Если желательно, чтобы все страницы были по умолчанию скрыты (установка флажков в разделе "Локализация", вкладки Поведение), в TYPO3_CONF_VARS можно установить параметр:
$TYPO3_CONF_VARS['FE']['hidePagesIfNotTranslatedByDefault'] = '1';

Что незамедлительно отразиться на Обзоре локализации:


Помните, что на странице "Examples" изменился флажок в настройках Локализация (фон стал серым, а не розовым, а метка самого флажка стала "Отображать страницу, даже если нет перевода"):

Заключительный замечания
Резюме по цветам фона, использующимся в "Обзоре локализации":
Зеленый фон: страница имеет перевод и доступна на этом языке. Для переводов это значит, что на странице присутствует запись "Альтернативный язык страницы" (можно увидеть в модуле Веб>Список).
Розовый фон: страница недоступна на этом языке, и при попытке вывести ее, появится сообщение об ошибке. В меню для сайта на языке перевода такие страницы не появляются.
Серый фон (недоступно для языка по умолчанию): страница выведет содержимое, определенное в режиме fallback. Зависит от настройки “config.sys_language_mode” в шаблоне TypoScript. Дополнительная информация дана ниже.
Обратите внимание о возможности появления ложных пунктов меню при использовании настроек "Локализация":
При работе в режиме fallback (возврата) по умолчанию (config.sys_language_mode = 0/blank/ге установлено) при формировании меню могут быть созданы ложные пункты, если не найден перевод страницы, так как sys_language_uid будет отличаться от значения, установленного через параметр &L (который не затронет формирование меню). Элементы меню недоступные на языке по умолчанию не будут показаны, даже если должны были бы, а элементы, недоступные на языке перевода все равно будут присутствовать.
Решение состоит в настройке TypoScript  "config.sys_language_mode = content_fallback", так как при этом значение “sys_language_uid” будет установлено в зависимости от определенного в &L, независимо от существования перевода.
Если настройку “config.sys_language_mode = content_fallback” использовать невозможно, то можно установить свойство “protectLvar” для объектов HMENU; таким образом для недоступных элементов меню будет скорректирована переменная L. За детальным описанием этого параметра обратитесь к TSref. 
Веб>Список Просмотр переводов
В модуле Веб>Список можно включить режим просмотра локализации списка, при этом появляются кнопки, позволяющие делать локализацию записей из таблиц, поддерживающих локализацию:


Результат следующий:

Если локализации элемента на язык, для которого существует запись "Альтернативный язык страницы" не существует, значок этого языка появляется в столбце "Перевести на:", щелчок по значку откроет локализацию для элемента на этом языке. 
Обратите внимание, что элементы содержимого на странице могут быть локализованы только на те языки, для которых присутствуют записи "Альтернативного языка страницы", так на этой странице присутствуют записи альтернативных языков для датского (Velkommen til TYPO3) и русского (Добро пожаловать в TYPO3). При этом элементы содержимого уже переведены на русский (значки локализации элементов находятся в столбце "Локализация") и еще не переведены на датский (датские флажки все еще находятся в столбце "Перевести на:).
Технические замечания о "Локализации"
Ссылки "Перевести на:", присутствующие в модулях Веб>Список, Веб>Страница и т.д. используют команду ядра “localize”. Эта команда создает копию записи на языке по умолчанию, изменяя языковые настройки на запрашиваемый язык и давая связь с записью на оригинальном языке. Такая связь локализации с оригиналом дает возможность точного отслеживания переводов.
Таким образом во внешнем интерфейсе выводятся записи на нужном языке, за сценой же происходит следующее: сначала выбираются элементы на языке по умолчанию, а затем они замещаются (на них накладываются) альтернативные языковые записи, если таковые имеются. Это означает, что все запросы и ссылки между записями должны производится с записями на языке по умолчанию, а локализация просто накладывается автоматически поверх выбранного и отображается, если доступна. Это технически не только надежнее, но и дает возможность наследования содержимого из записи по умолчанию — изображения, ссылки, связи и тому подобные данные, все это не нужно вводить еще раз для локализации записи!
Возможность наложения и наследования включается через такие параметры настроек TypoScript, как “config.sys_language_overlay” и “config.sys_language_softMergeIfNotBlank”.
Настройка TypoScript
В шаблон TypoScript может быть помещена следующая настройка для локализации:
# Локализация:
config {
   linkVars = L
}
[globalVar = GP:L=1]
config {
   sys_language_uid = 1
   language = dk
   locale_all = da_DK
   metaCharset = iso-8859-1
 }
[globalVar = GP:L=2]
config {
   sys_language_uid = 2
   language = ru
}
[global]
Переменная “&L”
Хотя использование переменной L для локализации и не обязательно, но крайне рекомендуется, так как она жестко закодирована во многих местах на хранение uid записи sys_language (меню / realurl / TemplaVoil? / модуль Страница / ссылки предварительного просмотра и т.д.). 
Строки 1-3 говорят, что если существует запрос GET переменной “&L=X”, то он должен быть передан во все сформированные ссылки.
В строках 4 и 11 указаны условия, говорящие, что если GET переменная “L” равна 1 или 2, то системный язык (config.sys_language_uid) устанавливается соответствующим образом (сюда же можно внести и другие настройки для шаблона TypoScript, изменяющиеся при локализации). Кроме того, благодаря этим условиям, при кешировании будет поддерживаться распознавание параметра L.
Подобная настройка переменной L — это минимальное требование для правильной работы переключения языков.
config.language
(строки 7 и 14) это настройка системного "языкового ключа", используемого для языка. Используется для отбора меток в файлах llXML (locallang-XML). Такая настройка обеспечивает отображение меток во внешних дополнениях на выбранных языках (требуется установленный в системе соответствующий языковой пакет и перевод дополнения).
config.locale_all
(строка 8) настраивает локаль, отвечающую за формат некоторых значений при выводе из PHP, например, формат дат, использующих strftime(), которая выводит названия месяцев/дней на языках локализации.
config.metaCharset
(строка 9) настройка кодировки символов выводимой страницы на “iso-8859-1”. Это значит, что содержимое проходит внутреннюю обработку в utf-8 (зависит от настройки “forceCharset”), а перед выводом преобразуется в “iso-8859-1”:
А для языка по умолчанию и русского:

Даже если для русского “config.metaCharset” будет установлен на “iso-8859-1”, выводиться все будет корректно, так как для символов, которые не могут быть корректно представлены на выбранном языке, будут использованы HTML-объекты (entities):
utf-8 (default):
iso-8859-1:

Режим локализации: “config.sys_language_mode”
Режим локализации определяет поведение системы, если нет запрошенного перевода страницы (то есть нет записи "Альтернативного языка страницы"). Например, необходимо при этом вывести ошибку “страница не найдена”, или показать запись на языке по умолчанию, либо на другом доступном языке, а  если так, то на каком? И если так, то на каком языке оставить пункты меню? Все эти настройки возможно сделать здесь.
Обзор комбинаций
Режим локализации определяет параметр TypoScript “config.sys_language_mode”. 
В приведенной ниже таблице дан обзор возможных комбинаций режимов локализации (config.sys_language_mode) и uid языка (config.sys_language_uid, которая по существу для типовой настройки определяется входящей переменной“&L=”).
Первые два столбца отражают значения настроек (синие).
Последние три столбца отображают значение внешний переменных в TYPO3 и описание поведения.
Настройки сделаны на основе страницы, где в свойствах:
ни один из флажков "Локализации" не установлен (значит, что ни язык по умолчанию, ни несуществующий альтернативный язык не заблокированы);
существует русский перевод (запись Альтернативного языка страницы), но нет датского перевода.
Поведение для языка по умолчанию (английского) и для русского перевода, конечно же, - отображение перевода, и, следовательно, не нам не интересно. Эти сценарии включены в таблицу, но недоступны, так как они одинаковы для всех комбинаций “sys_language_mode”. Интерес вызывают строки, где запрашивается датский язык. 
Так установлен режим наложения для тестируемой страницы:

config.
sys_
language_
mode
config.
sys_
language
_uid 
(установлено через &L)
TSFE->
sys_
language
_uid
TSFE->
sys_
language
_content
Результат                                                                             
[blank]

0
0
Содержимое: английское
Меню: английское

2
2
2
Содержимое: русское
Меню: русское

1
0
0
Поведение: все содержимое сайта ведет себя как для языка по умолчанию, за исключением того, что “&L=1” пеедается в ссылки, и любые настройки, сделанные через условия TypoScript для “GP:L” будут действовать.

Содержимое: английское
Меню: английское
Примечание: “Локализация” для страниц не соблюдается! Обратитесь к разделу, говорящему о настройка "Локализация" (например, "Сокрытие страниц без перевода").
content_fallback

0
0
Содержимое: английское
Меню: английское

2
2
2
Содержимое: русское
Меню: русское

1
1
0
Поведение: содержимое отображается на языке по умолчанию, в то время как меню формируется на датском. Такой режим позволяет пользователям "оставаться" на выбранном языке, даже при посещении страниц, содержимое которых не переведено, оно выводится на на языке по умолчанию.

Содержимое: английское
Меню: датское
content_fallback : 1,0

0
0
Содержимое: английское
Меню: английское

2
2
2
Содержимое: русское
Меню: русское

1
1
2
Поведение: вроде установки “content_fallback”, но с добавлением значений “2,0”, означает что что сначала для отображения ищется содержимое на языке “2” (в этом случае — датском) и отображается, если доступно, иначе ищется содержимое на языке “0”.
Конечно, здесь не имеет смысл показывать русский вместо датского, но в случае использования португальского / бразильского португальского имеет смысл определять приоритетный язык.

Содержимое: русское
Меню: датское
strict

0
0
Содержимое: английское
Меню: английское

2
2
2
Содержимое: русское
Меню: русское

2
-
-
Сообщение об ошибке: “Страница на запрашиваемом языке недоступна (строго).”
ignore

0
0
Содержимое: английское
Меню: английское

2
2
2
Содержимое: русское
Меню: русское

1
1
1
Поведение: присутствие записи Альтернативного языка страницы не имеет значения, значение просто установлено.
Содержимое: датское (конечно ничего не отображается)
Меню: датское
Некоторые технические замечания
Независимо от режима локализации, переменная “&L=” всегда передается в ссылках (в зависимости от “config.linkVars”).
Любые условия TypoScript (например, “[globalVar = GP:L=1]”) остаются в силе, поэтому сохраняются все настройки, независимо от режима локализации.
Говоря "перевод существует", подразумевают что существует запись "Альтернативного языка страницы" (зеленый фон в Обзоре локализации модуля Веб>Инфо). Однако это не связано с локализацией элементов содержимого на странице. Но в общем подразумевается, что если создана запись Альтернативного языка страницы, то на ней должно быть переведенное содержимое.
В основном внутренние значения TSFE->sys_language_uid и TSFE->sys_language_content выполняют различные функции:
TSFE->sys_language_uid определяет общий язык на котором должно выводиться содержимое. Это относится к шаблонам в TemplaVoil?, формированию меню и т.п.
TSFE->sys_language_content определяет язык содержимого страницы и может отличаться, в частности это делает возможным запрос содержимого на языке, отличающимся от определенного в TSFE->sys_language_uid 
Если "Локализация" страницы установлена на "Спрятать стандартный язык страницы", то последует ошибка при установке content_fallback, который попытается получить содержимое на языке по умолчанию. 
Зарекомендовавшие себя настройки режима локализации
Всегда рекомендуется использовать
config.sys_language_mode = content_fallback

Так как при этом самая лучшая совместимость с другими функциями локализации, так как значение “TSFE->sys_language_uid” устанавливается на запрашиваемый язык.
llXML (locallang-XML) в расширениях и TypoScript
Использование метог llXML в структурах TypoScript
llXML файлы — это файлы XML, содержащие метки, которые может получить система для локализованной версии, при условии установки языкового пакета. Если нужно получить значения из файлов llXML в TypoScript, можно поступить следующим образом:
page.20 = TEXT
page.20.data = LLL:EXT:indexed_search/pi/locallang.xml:submit_button_label

Таким образом ищется метка “submit_button_label” в файле “pi/locallang.xml” из расширения “indexed_search”.
Если значение “config.language” установлено на “ru” и русский языковой пакет установлен в “typo3conf/l10n/ru/” должно быть выведено “Поиск” (а не “Search”, как было бы, если бы метка была получена на языке по умолчанию).
Использование метог llXML во внешних дополнениях
В данном руководстве не рассматривается, как использовать метки llXML в коде PHP (смотрите “Inside TYPO3”), но в правильно сделанном внешнем дополнении для формирования меток перевода будут использоваться файлы llXML.
Например, если “config.language = ru” и установлен русский языковой пакет, для “indexed search” будет выведена такая страница:

Для назначения своих значений можно воспользоваться TypoScript (поддерживается большинством расширений, созданных при помощи kickstarter и использующих piBase API). Пример переназначения кнопки поиска:
plugin.tx_indexedsearch._LOCAL_LANG.ru.submit_button_label = ИСКАТЬ!

Будет выведено следующее:

Для того, чтобы узнать, что ключ метки — это “submit_button_label”, необходимо взглянуть в файл “indexed_search/pi/locallang.xml”, ну а “ru” – это, разумеется, ключ языка. Приставка “plugin.tx_indexedsearch._LOCAL_LANG” проверяется через Проводник объектов TypoScript:

Обеспечивается ли перевод внешних дополнений, языкового ключа которых нет в системе?
Существует связь между системными языками TYPO3 (которые могут быть выбраны для внутренних пользователей) и переводами внешних дополнений. Если сайт создается на языке, поддерживаемом во внутреннем интерфейсе, необходимо всего лишь установить соответствующий языковой пакет. Но что если нужно сделать перевод сайта на "марсианский"?
Фактически мы можем прибегнуть к возможности переназначения “_LOCAL_LANG”!
Так подобная настройка переведет кнопку поиска на "марсианский":
config.language = marsian

plugin.tx_indexedsearch._LOCAL_LANG.marsian {
  submit_button_label = !"#€%&/(
}

Меню выбора языка
Очевидно, что где-то сайте должно быть меню выбора языка. В нем должны быть представлены элементы для всех возможных языков, и, так как что-то может быть не переведено, элементы меню должны быть представлены в четырех вариантах:
перевод существует;
перевод существует и выбран в данный момент;
перевода не существует;
перевода не существует и выбрано в данный момент.
Для создания такого меню нужно воспользоваться объектом HMENU cObject из TypoScript в его специальном режиме – “language”.
Примеры настроек:
Пример GMENU
 
menu.language = HMENU
menu.language {
	special = language
	special.value = 0,1,2
	special.normalWhenNoLanguage = 0
	1 = GMENU
	1 {
		# Обычные ссылки на существующие языки:
		NO {
			XY = [5.w]+4, [5.h]+4
			backColor = black
			5 = IMAGE
			5.file = EXT:t3skin/images/flags/gb.png || EXT:t3skin/images/flags/dk.png  || EXT:t3skin/images/flags/ru.png
			5.offset = 2,2
		}

		# Выбран текущий язык:
		ACT < .NO
		ACT=1
		ACT.backColor = #F39C27
		
		# Язык НЕДОСТУПЕН:
		USERDEF1 < .NO
		USERDEF1=1
		USERDEF1.5.file = EXT:t3skin/images/flags/multiple.png
		USERDEF1.noLink = 0

		USERDEF2 < .USERDEF1
		USERDEF2.backColor = white
	}
}
Пример TMENU

menu.language = HMENU
menu.language {
	special = language
	special.value = 0,1,2
	special.normalWhenNoLanguage = 0
	1 = TMENU
	1 {
		# Обычные ссылки на существующие языки:
		NO = 1
		NO.allWrap = |*| | *  |*| |
		NO.linkWrap = <b> | </b>
		NO.stdWrap.setCurrent = English || Danske || Русский
		NO.stdWrap.current = 1

		# Выбран текущий язык:
		ACT < .NO
		ACT.linkWrap = <b style="background-color : white"> | </b>

		# Язык НЕДОСТУПЕН:
		USERDEF1 < .NO
		USERDEF1.linkWrap = <span style="background-color : grey"> | </span>
		USERDEF1.doNotLinkIt = 1
	}
}
Локализация содержимого
Тема локализации фактического содержимого страниц может иметь разные парадигмы и соответствующие им настройки. Важно понимать, нужно ли делать перевод или локализацию страниц.
Если нужен точный перевод страниц, то лучше может подойти "связанное содержимое", предназначенное именно для этого. При этом содержимое страницы всегда определяют записи на языке по умолчанию, а возможность любых переводов зависит от их существования. Это менее гибко, но и позволяет уменьшить возможность ошибок.
Если нужна локализация страницы, то для нее возможен свой набор элементов содержимого, выстроенных в произвольной порядке. При желании, все еще возможно связать перевод с оригиналом на языке по умолчанию. Это дает значительную гибкость, возможно даже излишнюю.
Теперь можно перейти к рассмотрению различий этих подходов в контексте классического модуля Страница.
Связь содержимого
Работая в классическом режиме TYPO3, когда содержимое располагается в столбцах (модуль Веб>Страница), можно выбрать один из двух разных подходов к локализации:
Без связи: на каждом языке может присутствовать любое свое количество элементов содержимого, их порядок может быть произвольный, а связь с элементом содержимого на языке по умолчанию не обязательна.
Связь с языком по умолчанию: все переводы делаются только лишь для существующих на языке по умолчанию записей элементов содержимого.
Подробно модели описываются далее.
Без связи
Это режим по умолчанию. Для него не требуется никаких специальных настроек ни внутреннего, ни внешнего интерфейсов.
Модуль Веб>Страница выглядит так:


Как хорошо видно, здесь два элемента содержимого на русском, и только один элемент — на языке по умолчанию.
Язык всех переводов установлен на русский (видно по русскому флагу и названию языка рядом с ним), но они могут быть связаны с записями на языке по умолчанию.
Для создания обычных записей переводов, не связанных с языком по умолчанию, можно использовать обычные значки для создания новых элементов содержимого в столбце для одного из языков перевода.
Если же нужна запись элемента-перевода содержимого, связанная с уже существующей записью на языке по умолчанию, то нужно сначала нажать на кнопку "Скопировать стандартные записи содержимого". После чего в столбце для языка перевода появятся копии записей содержимого, связанные с записями на языке по умолчанию.

Преимущество использования связанных записей в том, что в диалоге их свойств будут присутствовать и значения свойств на языке по умолчанию, в том числе и для основного содержимого. Это удобно для переводчиков — запись перевода элемента является дубликатом записи на основном языке, нужно лишь перевести основное ее содержимое,  и, возможно, изменить иллюстрации:

Во внешнем интерфейсе на сайте это выглядит так:


Связь с записями на языке по умолчанию
Построение перевода сайта на основе существующих записей на языке по умолчанию требует дополнительных настроек как внутреннего, так и внешнего интерфейсов:
Веб>Страница: модуль Страница должен знать, что переводы должны быть строго связаны с записями на языке по умолчанию. Это настраивается через параметр “mod.web_layout.defLangBinding = 1” в  TSconfig страницы.
TypoScript: для формирования страницы, необходимо выбрать содержимое на языке по умолчанию и найти накладываемые на него записи переводов. Это настраивается посредством “config.sys_language_overlay = 1” в шаблоне TypoScript.
Давайте разберем влияние каждой из настроек. Итак, вот как выглядит страница сайта (во внутреннем и внешнем интерфейсе) без специальных настроек:


Как видно, здесь в обычном столбце имеются два элемента на языке по умолчанию. А в русском переводе в обычном столбце имеется один не связанный с записью элемент (вверху) и один — связанный (mod.web_layout.defLangBinding = 0). Кроме того, на языке по умолчанию имеется одна не переведенная на русский язык запись — это можно понять по наличию кнопки "Скопировать стандартные записи содержимого. Во внешнем интерфейсе при этом будет следующее:

Как видно, во внешнем интерфейсе для русского языка были выведены только лишь записи-переводы на русском же языке — не переведенная запись на языке по умолчанию не была выведена (config.sys_language_overlay = 0).
Первый из рассматриваемых параметров, как уже было сказано, влияет на отображение записей во внутреннем интерфейсе. Так, установив  mod.web_layout.defLangBinding = 1” в  TSconfig страницы, получим следующее во внутреннем интерфейсе:
Как видите, теперь в модуле Страница элементы-переводы, не связанные с элементами на языке по умолчанию показаны не будут (хотя и могут присутствовать). При этом вид страницы во внешнем интерфейсе не изменится, так как при формировании страницы будут учитываться все элементы на языке, для которого формируется страница. Таким образом во внешнем интерфейсе на русском языке все еще будет выводиться элемент, не связанный с элементом на языке по умолчанию (но не видимый в модуле Страница!), и будет отсутствовать не переведенный элемент на языке по умолчанию.
Теперь к TS шаблону страницы добавим настройку  config.sys_language_overlay = 1. На внешний вид страницы во внутреннем интерфейсе это никак не повлияет, зато вид страницы во внешнем интерфейсе поменяется: исчезнет элемент перевода, не связанный с элементом на языке по умолчанию, зато появится не переведенный элемент на языке по умолчанию. Как уже говорилось, эта настройка меняет порядок формирования страницы — сначала запрашиваются все записи на языке по умолчанию, а затем накладываются существующие записи-переводы, связанные с записями на языке по умолчанию. Таким образом, существующая, но не связанная с записью на языке по умолчанию, запись-перевода даже не была запрошена для формирования страницы, зато появилась запись на языке по умолчанию, для которой не была создана связанная запись-перевод.
Режимы наложения
Существует несколько вариантов режима наложения:
config.sys_language_overlay = hideNonTranslated
Внешний вид сайта поменяется следующим образом:
Как видите, не переведенный с языка по умолчанию элемент просто не отображается на сайте.
Еще одна настройка:
config.sys_language_softMergeIfNotBlank = tt_content:image, tt_content:header

Такая настройка будет использоваться, если поля “image” и “header” в переводах не заданы, при этом будет позволено использовать значения полей из записи для языка по умолчанию. 
Так как в переводе нижнего элемента нет изображения, поле image в нем не заполнено, и используется изображение из элемента по умолчанию (слева — язык по умолчанию, справа — русский перевод):



Таким образом, посредством этой настройки можно наследовать значения из оригинальной записи (на языке по умолчанию), оставляя поля пустыми, либо давать им перевод (вроде поля “header”, значение для которого в переводе: “[Translate to Русский:]...”).
Замечание: если “l10n_mode” столбцов в TCA установлено на “exclude” или “mergeIfNotBlank”, наследование значений из записей по умолчанию уже производится. Но так как может понадобиться это сделать для какого-то отдельного сайта, “config.sys_language_softmergeIfNotBlank” добавить настройку “mergeIfNotBlank” к дополнительным полям записи шаблона.
При разработке таблицы базы данных, предназначенной для локализации, необходимо повнимательней ознакомиться с настройкой “l10n_mode” из TCA. Кроме того, необходимо знать, что используя возможности локализации, предоставляемые ядром, связи между записями в идеале должны существовать с записями на языке по умолчанию, но не между самими переводами — переводы должны выбираться и накладываться на оригинальные записи при формировании страницы (подразумевается установленный параметр “config.sys_language_overlay”). Наследование значений полей из оригинала также случается лишь при выборе записи на языке по умолчанию с последующим наложением на нее перевода.
Элементы с языком "[все]"
Используя связанные языковые записи вместе с настройкой “config.sys_language_overlay = hideNonTranslated” существует специальное значение для языка “[все]” (технически — значение поля -1): такие элементы не скрываются при переводе, и не предназначены для перевода, хотя и могут быть переведены.
Настройка выглядит так:

В модуле Веб>Страница это отражено таким образом (обратите внимание на флаг):

Типичное предназначение языка "[все]" — элементы "Вставить запись", "Дополнение" (контейнеры для чего-то еще) или “Flexible Content Element” (расширение “templavoila” обычно включает локализацию содержимого FlexForm).
Замечания
“Спрятать стандартный язык страницы” несовместимо со связыванием содержимого:  при использовании режима связывания (т.е. “config.sys_language_overlay = 1 / hideNonTranslated”) необходимо создавать шаблонные записи на языке по умолчанию при использовании настроек страницы "Локализация" "Спрятать стандартный язык страницы.
Поддержка связанного содержимого: TypoScript cObjects CONTENT и RECORD поддерживают настройки “sys_language_overlay” посредством первоначального запроса элементов на языке по умолчанию и последующим наложением в соответствие с настройками. Это должно соблюдаться везде, где запрашивается содержимое (например, во внешних дополнениях). Технически это осуществляется посредством функции $GLOBALS['TSFE']->sys_page->getRecordOverlay(), но перед ее использованием, взгляните на ее применение в классе, вроде “class.tslib_content.php” из расширения “cms” (tslib/).
“Поиск” элементов содержимого: “Поиск” в элементах содержимого должен быть тщательно продуман, если необходимо осуществлять его на выбранном языке. Запрос на поиск выполняется через cObject “SEARCHRESULT” с добавлением к запросу “sys_language_uid”. Поэтому лучше создать элемент для блока поиска на каждом из языков (то есть без наследования). Альтернатива — разместить блок поиска на странице, совсем не имеющей переводов (подразумевается, что используется режим “content_fallback”!).
FlexForms
FlexForm имеют интересные возможности по хранению локализаций внутри своего XML. Включено ли это или нет, зависит от тегов <meta> в Структуре данных. Но имеется условие, что код ISO должен быть связан с системными языками:

(обязательно требуется “static_info_tables”).
При этом локализованное содержимое в TYPO3 определяется по его языку посредством значения uid (содержимое [languageField]), указывающего на запись "Язык сайта". Flexform используют универсальный код ISO, более новую и лучшую архитектуру, разумеется.
Далее описываются режимы локализации FlexForm. Они применимы ко всем FlexForm (формам), но для иллюстрации их использования был взят сайт, построенный на основе TemplaVoil?, и "Настраиваемые элементы". Это самый типичный пример использования полей FlexForm для локализуемого содержимого. Другой пример — настройка дополнений, но в этом случае, скорее всего локализация будет отключена совсем.
Режимы локализации FlexForm
Для содержимого FlexForm возможны три режима локализации:
Disabled: (отключено) без встроенной локализации элементов. 
Inheritance: (наследование) все значения по умолчанию во FlexForm могут быть переведены. В этом случае переводы строго соответствуют элементам на языке по умолчанию. Кроме того, это позволяет наследовать значения из языка по умолчанию (вроде значений для ссылок или изображения).
Separate: (раздельно) каждая из локализаций элемента может иметь свою, независимую структуру. Это справедливо лишь в том случае, если элемент flexform имеет многоуровневую структуру, вроде списков ссылок, который может разниться для каждого из языков.
Эти режимы настраиваются через тег <meta> в Структуре данных. 
После начала использования Структуры данных будет невозможно переключиться между режимами Inheritance и Separate (<langChildren> = 1/0) без потери локализованного содержимого. Но содержимое по умолчанию ни в коем случае не потеряется (могут быть специальные инструменты, обеспечивающие подобные преобразования).
Обзор
В обзоре показаны возможные режимы локализации для поля FlexForm. 
Если поле FlexForm используется для хранения ссылок на элементы содержимого, называемое "элемент-контейнер", то требуются дополнительные сведения, особенно в отношение TemplaVoil?, которые приведены в последующих разделах.

Disabled
Inheritance
Separate
Описание:
Нет встроенной локализации элементов. 
Все значения по умолчанию во FlexForm могут быть переведены. Перевод возможен для элементов на языке по умолчанию.
Каждая локализация элемента может иметь свою, независимую структуру. Перевод технически не связан с языком по умолчанию.
Использование:
Универсальное: для всех языков.
Перевод: содержимое по умолчанию в точности переводится на каждый из языков.
Локализация: содержимое на других языках может иметь отличную от языка по умолчанию структуру.
Запись языка 
(значение “languageField”)
Используют: [все] языки

Или же можно, конечно, локализовать запись с помощью ядра TYPO3, как и любую другую запись.
Используют: [все] языки
Используют: [все] языки
Настройка Структуры данных:
<meta>
    <langDisable>1</langDisable>
</meta>

Замечание: <langChildren>в этом случае ничего не значит.
<meta>
    <langChildren>1</langChildren>
    <langDisable>0</langDisable>
</meta>
<meta>
    <langChildren>0</langChildren>
    <langDisable>0</langDisable>
</meta>
Наследование содержимого из языка по умолчанию:
Неприменимо
Если нет перевода содержимого, наследуется содержимое по умолчанию ("пустая" строка или ноль).

Имеются настройки, смотрите далее.
Невозможно, так как технически содержимое на языке по умолчанию не связано с локализациями.
Рекомендации по использованию:
Используйте поля FlexForm такого типа в качестве "элементов контейнеров", определяющих структуру для других элементов содержимого. При этом маловероятно, что понадобиться локализация ссылок на элементы содержимого (*).
Может быть и настройкой дополнения (также независимо от языка)

Рекомендуется для элементов контейнеров!
Рекомендуемый тип, так как большинству сайтов необходим перевод элементов содержимого на языке по умолчанию. Если некоторые элементы должны быть проигнорированы, имеется возможность сделать это.

Рекомендуется для содержимого!
Применимо для Структур данных с вложенными структурами разделов/массивов (вроде списка ссылок), но для одноуровневых Структур данных необходимо страться избегать этого по причине низкой гибкости.

Избегайте, если не знаете, что делаете.
Предупреждения:

С осторожностью используйте для "элементов контейнеров".
Никогда не используйте для "элементов контейнеров".
Специальные замечания, относительно "Свободной" парадигмы (смотрите ниже) и элементов контейнеров.
В "Свободной" парадигме, “Disabled” обычно говорит, что локализация неприменима для элемента контейнера. В противоположность к "Связанной" парадигме, где “Disabled” - это рекомендуемый режим. 
Причина в том, что в "Свободной" парадигме не ожидается  наложение локализации на записи на языке по умолчанию, а скорее все строится на раздельных структурах локализуемых элементов, следовательно требуются режимы либо “Inheritance”, либо “Separate”. Но некоторые недостатки делают эту парадигму проблематичной. Обратитесь к приводимому ниже обсуждению.
Этот режим рекомендуется для "Свободной" парадигмы, так как строится отдельная структура элементов содержимого. На как только структура перерастает один уровень, становиться невозможно сохранять синхронизацию с языком по умолчанию, так как это становиться локализацией другого элемента.
Смотрите замечания для режима “Inheritance”, все остается справедливо и здесь.

Disabled (отключено)
Это элемент FlexForm в режиме локализации disabled. Это проявляется также, как и для остальных элементов содержимого — на основе настройки языка в соответствующем поле (смотрите далее). 
Так как эта Структура данных используется для демонстрации различий в режимах локализации, давайте посмотрим на нее:
На корневом уровне (root) имеются поля "Название" и "Основное содержимое";
Затем следует раздел ссылок, имеющий заголовок "Название блока ссылок", в который можно добавить два элемента, каждый из которых имеет поле "Тест ссылки" и "Ссылка":
На сайте это выглядит следующим образом:

Inheritance (наследование)
При помощи наследования, перевод тесно связан со значениями записи на языке по умолчанию. В форме свойств это выглядит подобным образом: 


Обратите внимание, что для каждого поля (“Header”) имеется пара на доступном языке (“Header (vRU)”). 
Код языка (“vRU”) складывается из “v” + ISO код языка.
Обратите внимание, что поле “Url (vRU)” для второй ссылки не заполнено. При этом наследуется значение из поля “Url” (значение по умолчанию). Это может быть полезно, если, например, URL не меняется от языка к языку, а если меняется, то можно его изменить в соответствующем поле!
The website display of the default record is this:

На русском выводится следующее:

Как видите, текст переведен. Только если навести мышку или щелкнуть по ссылке, можно понять, что URL наследуется.
Separate (без связи)
В режиме “Separate” два языка полностью разделены в форме. Это не влияет на поля “Заголовок” и "Основной текст", блок ссылок может быть скомпонован по разному для разных языков. Ниже ясно видна разница – в датском переводе (“DA”) имеется лишь одна ссылка, в отличие от языка по умолчанию, где используется компоновка “Link header” / “Link” / “Link”.

Результат на сайте ожидаемый.
Язык по умолчанию:

Датская “локализация”:

Здесь видна гибкость "раздельного" подхода — содержимое можно действительно локализовать, а не просто перевести. Но расплачиваться приходится потерей связи в техническом плане между содержимым на языке по умолчанию и переводом.
Данные FlexForm XML
Здесь приведены чисто технические подробности, но интересующиеся могут взглянуть на различия в данных FlexForm XML для различных сценариев:
“Disabled”:

   1: <?xml version="1.0" encoding="utf-8" standalone="yes" ?>
   2: <T3FlexForms>
   3:     <data type="array">
   4:         <sheet index="sDEF" type="array">
   5:             <language index="lDEF" type="array">
   6:                 <field index="field_header" type="array">
   7:                     <vDEF>Localization: Disabled</vDEF>
   8:                 </field>
   9:                 <field index="field_body" type="array">
  10:                     <vDEF>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Cras id quam ut sem ullamcorper aliquam. Aliquam faucibus urna sit amet massa. Quisque rutrum enim sed libero mollis fringilla. Maecenas eget sapien ac est vehicula ullamcorper. Aenean nunc tellus, sollicitudin id, ornare nec, euismod non, nunc. Sed aliquam, pede eu suscipit posuere, elit quam facilisis neque, vel dignissim arcu lacus at nulla.</vDEF>
  11:                 </field>
  12:                 <field index="field_links" type="array">
  13:                     <el type="array">
  14:                         <field index="1" type="array">
  15:                             <field_linkheader type="array">
  16:                                 <el type="array">
  17:                                     <field index="field_headerstr" type="array">
  18:                                         <vDEF>Maecenas eget</vDEF>
  19:                                     </field>
  20:                                 </el>
  21:                             </field_linkheader>
  22:                         </field>
  23:                         <field index="2" type="array">
  24:                             <field_linkcontent type="array">
  25:                                 <el type="array">
  26:                                     <field index="field_linktext" type="array">
  27:                                         <vDEF>My link to TYPO3.org</vDEF>
  28:                                     </field>
  29:                                     <field index="field_url" type="array">
  30:                                         <vDEF>http://typo3.org/</vDEF>
  31:                                     </field>
  32:                                 </el>
  33:                             </field_linkcontent>
  34:                         </field>
  35:                         <field index="3" type="array">
  36:                             <field_linkcontent type="array">
  37:                                 <el type="array">
  38:                                     <field index="field_linktext" type="array">
  39:                                         <vDEF>My link to TYPO3.com</vDEF>
  40:                                     </field>
  41:                                     <field index="field_url" type="array">
  42:                                         <vDEF>http://typo3.com/</vDEF>
  43:                                     </field>
  44:                                 </el>
  45:                             </field_linkcontent>
  46:                         </field>
  47:                     </el>
  48:                 </field>
  49:             </language>
  50:         </sheet>
  51:     </data>
  52: </T3FlexForms>
 
“Inheritance”:
  1: <?xml version="1.0" encoding="utf-8" standalone="yes" ?>
   2: <T3FlexForms>
   3:     <data type="array">
   4:         <sheet index="sDEF" type="array">
   5:             <language index="lDEF" type="array">
   6:                 <field index="field_header" type="array">
   7:                     <vDEF>Localization: Inheritance</vDEF>
   8:                     <vDA>Danish alternative header (Localization: Inheritance)</vDA>
   9:                     <vRU></vRU>
  10:                 </field>
  11:                 <field index="field_body" type="array">
  12:                     <vDEF>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Cras id quam ut sem ullamcorper aliquam. Aliquam faucibus urna sit amet massa. Quisque rutrum enim sed libero mollis fringilla. Maecenas eget sapien ac est vehicula ullamcorper. Aenean nunc tellus, sollicitudin id, ornare nec, euismod non, nunc. Sed aliquam, pede eu suscipit posuere, elit quam facilisis neque, vel dignissim arcu lacus at nulla.</vDEF>
  13:                     <vDA>Danish alternative bodytext here. Maecenas eget sapien ac est vehicula ullamcorper. Aenean nunc tellus, sollicitudin id, ornare nec, euismod non, nunc. Sed aliquam, pede eu suscipit posuere, elit quam facilisis neque, vel dignissim arcu lacus at nulla.</vDA>
  14:                     <vRU></vRU>
  15:                 </field>
  16:                 <field index="field_links" type="array">
  17:                     <el type="array">
  18:                         <field index="1" type="array">
  19:                             <field_linkheader type="array">
  20:                                 <el type="array">
  21:                                     <field index="field_headerstr" type="array">
  22:                                         <vDEF>Maecenas eget</vDEF>
  23:                                         <vDA>Danish header</vDA>
  24:                                         <vRU></vRU>
  25:                                     </field>
  26:                                 </el>
  27:                             </field_linkheader>
  28:                         </field>
  29:                         <field index="2" type="array">
  30:                             <field_linkcontent type="array">
  31:                                 <el type="array">
  32:                                     <field index="field_linktext" type="array">
  33:                                         <vDEF>My link to TYPO3.org</vDEF>
  34:                                         <vDA>Mit link til TYPO3.org</vDA>
  35:                                         <vRU></vRU>
  36:                                     </field>
  37:                                     <field index="field_url" type="array">
  38:                                         <vDEF>http://typo3.org/</vDEF>
  39:                                         <vDA>http://typo3.org/dk/</vDA>
  40:                                         <vRU></vRU>
  41:                                     </field>
  42:                                 </el>
  43:                             </field_linkcontent>
  44:                         </field>
  45:                         <field index="3" type="array">
  46:                             <field_linkcontent type="array">
  47:                                 <el type="array">
  48:                                     <field index="field_linktext" type="array">
  49:                                         <vDEF>My link to TYPO3.com</vDEF>
  50:                                         <vDA>Mit link til TYPO3.com</vDA>
  51:                                         <vRU></vRU>
  52:                                     </field>
  53:                                     <field index="field_url" type="array">
  54:                                         <vDEF>http://typo3.com/</vDEF>
  55:                                         <vDA></vDA>
  56:                                         <vRU></vRU>
  57:                                     </field>
  58:                                 </el>
  59:                             </field_linkcontent>
  60:                         </field>
  61:                     </el>
  62:                 </field>
  63:             </language>
  64:         </sheet>
  65:     </data>
  66: </T3FlexForms>

“Separate”:
  1: <?xml version="1.0" encoding="utf-8" standalone="yes" ?>
   2: <T3FlexForms>
   3:     <data type="array">
   4:         <sheet index="sDEF" type="array">
   5:             <language index="lDEF" type="array">
   6:                 <field index="field_header" type="array">
   7:                     <vDEF>Localization: Separate</vDEF>
   8:                 </field>
   9:                 <field index="field_body" type="array">
  10:                     <vDEF>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Cras id quam ut sem ullamcorper aliquam. Aliquam faucibus urna sit amet massa. Quisque rutrum enim sed libero mollis fringilla. Maecenas eget sapien ac est vehicula ullamcorper. Aenean nunc tellus, sollicitudin id, ornare nec, euismod non, nunc. Sed aliquam, pede eu suscipit posuere, elit quam facilisis neque, vel dignissim arcu lacus at nulla.</vDEF>
  11:                 </field>
  12:                 <field index="field_links" type="array">
  13:                     <el type="array">
  14:                         <field index="1" type="array">
  15:                             <field_linkheader type="array">
  16:                                 <el type="array">
  17:                                     <field index="field_headerstr" type="array">
  18:                                         <vDEF>Maecenas eget</vDEF>
  19:                                     </field>
  20:                                 </el>
  21:                             </field_linkheader>
  22:                         </field>
  23:                         <field index="2" type="array">
  24:                             <field_linkcontent type="array">
  25:                                 <el type="array">
  26:                                     <field index="field_linktext" type="array">
  27:                                         <vDEF>My link to TYPO3.org</vDEF>
  28:                                     </field>
  29:                                     <field index="field_url" type="array">
  30:                                         <vDEF>http://typo3.org/</vDEF>
  31:                                     </field>
  32:                                 </el>
  33:                             </field_linkcontent>
  34:                         </field>
  35:                         <field index="3" type="array">
  36:                             <field_linkcontent type="array">
  37:                                 <el type="array">
  38:                                     <field index="field_linktext" type="array">
  39:                                         <vDEF>My link to TYPO3.com</vDEF>
  40:                                     </field>
  41:                                     <field index="field_url" type="array">
  42:                                         <vDEF>http://typo3.com/</vDEF>
  43:                                     </field>
  44:                                 </el>
  45:                             </field_linkcontent>
  46:                         </field>
  47:                     </el>
  48:                 </field>
  49:             </language>
  50:             <language index="lDA" type="array">
  51:                 <field index="field_header" type="array">
  52:                     <vDEF>Danish alternative header (Localization: Separate)</vDEF>
  53:                 </field>
  54:                 <field index="field_body" type="array">
  55:                     <vDEF>Danish alternative bodytext here. Maecenas eget sapien ac est vehicula ullamcorper. Aenean nunc tellus, sollicitudin id, ornare nec, euismod non, nunc. Sed aliquam, pede eu suscipit posuere, elit quam facilisis neque, vel dignissim arcu lacus at nulla.</vDEF>
  56:                 </field>
  57:                 <field index="field_links" type="array">
  58:                     <el type="array">
  59:                         <field index="1" type="array">
  60:                             <field_linkcontent type="array">
  61:                                 <el type="array">
  62:                                     <field index="field_linktext" type="array">
  63:                                         <vDEF>Danish link to a completely other site</vDEF>
  64:                                     </field>
  65:                                     <field index="field_url" type="array">
  66:                                         <vDEF>http://joomla.org/</vDEF>
  67:                                     </field>
  68:                                 </el>
  69:                             </field_linkcontent>
  70:                         </field>
  71:                     </el>
  72:                 </field>
  73:             </language>
  74:             <language index="lRU" type="array">
  75:                 <field index="field_header" type="array">
  76:                     <vDEF></vDEF>
  77:                 </field>
  78:                 <field index="field_body" type="array">
  79:                     <vDEF></vDEF>
  80:                 </field>
  81:             </language>
  82:         </sheet>
  83:     </data>
  84: </T3FlexForms>

Итоги:
Здесь вызывает интерес то, что для наследования (Inheritance) перевод значения по умолчанию (<vDEF>) в теге находится на том же уровне XML (Например, “<vDA>”) - все внутри тега <language index=”lDEF”>. Для разделения (Separate) переводы находятся в разных структурах в <language index=”lDA”>, в то время как значения хранятся в <vDEF>. В обоих случаях содержимое на языке по умолчанию хранится одинаково.
Кроме того, становится ясно, почему невозможно переключиться между двумя типами при первом добавлении локализованного содержимого — оно просто теряется, так как TYPO3 ищет перевод содержимого в другом месте XML. Могут существовать инструменты, позволяющие переназначить содержимое для подобных случаев.
Контроль доступа к языку
Если переводчик имеет доступ лишь к одному языку (здесь — к датскому), то в форме будет показан только этот язык(и), а содержимое на языке по умолчанию (для перевода) будет показано в режиме только для чтения:

FlexForm – элементы контейнеры
"Элемент контейнер" означает Настраиваемый элемент содержимого (Flexible Content Element), имеющий одно или несколько полей на корневом уровне (root), в которых можно поместить ссылки на другие элементы содержимого. Обычно такие элементы используются для создания зон в разметке для возможности размещения содержимого, таким образом они преследуют цели соблюдения структуры.
Классический элемент-контейнер может быть группой из двух столбцов элементов:

В каждый из столбцов помещен вложенный элемент содержимого. 
На сайте это выглядит так:

Обратите внимание, что элементы контейнеры должны обычно иметь настройку языка "[все]", чтобы содержимое могло формироваться на всех языках:

Две парадигмы использования элементов контейнеров
К сожалению было разработано два подхода к локализации сайта с контейнерными элементами. В модуле TemplaVoil? Страница имеется поддержка обоих. 
По умолчанию TemplaVoil? следует парадигме "Связанных элементов", являющейся рекомендуемым режимом в этом документе, а "Свободная" парадигма должна быть настроена через Tsconfig страницы для ее учета модулем Страница из TemplaVoil?.
Разница в следующем:
Парадигма “связанных элементов” (по умолчанию, рекомендуется): способствует соблюдению структуры (порядок и вложенность) на всех языках. Следовательно, все элементы контейнеры должны иметь структуры данных с "отключенным" режимом локализации. Все элементы-содержимое контейнеров (вроде "текст с изображением" и т.п.) помещаются в виде элементов на языке по умолчанию, которые могут иметь накладываемые локализации (требуется установка настройки “config.sys_language_overlay”). При необходимости, элементы на одном из языков, не имеющие аналогов на другом языке, можно разместить дополнительно, а в редких случаях, если требуется отдельная структура страниц, для СД элемента контейнера можно использовать режим “Inheritance” (наследования).
“Свободная парадигма” (альтернативная, должна быть настроена): способствует построению раздельных (порядок и вложенность) структур для каждого из языков, используя один из режимов: “Inheritance” (наследование) или “Separate” (раздельный) в структуре данных. Хотя это может показаться более естественным, но фактически привносит множество проблем. Функции локализации используются в менее рациональным способом, исключается наследование содержимого; порядок элементов может меняться, что может повлечь ошибку; структуры глубже одного уровня технически невозможно синхронизировать.
"Свободная" парадигма настраивается через следующий параметр в TSconfig страницы:
mod.web_txtemplavoilaM1.translationParadigm = free

Суть в том, что парадигма "связанных элементов" является более гибкой, но менее сложной. Поэтому данный документ призывает к использованию именно ее. Далее я постараюсь обратить внимание на различия, о которых нужно помнить.
Режим локализации элементов контейнеров (парадигма "связанных элементов")
Используя элементы контейнеры в парадигме "связанных элементов" (используемой по умолчанию и рекомендуемой), никогда нельзя использовать режим “Separate” (разделение), нужно избегать “Inheritance” (наследования), так как это может вызывать странное поведение, а рекомендуемый режима — “Disabled”. 
Рекомендация дается на основе того, что большинство многоязычных сайтов используют простые переводы страниц на другие языки, а, значит, и тот же порядок и иерархию элементов содержимого для всех языков. При этом режим “Disabled” для элементов контейнеров подходит наилучшим образом, он гарантирует использование одной и той же структуры элементов содержимого на всех используемых языках (локализация элементов, входящих в контейнеры, реализуется в виде наложений).
Но может понадобиться, чтобы некоторые страницы сайта отличались на разных языках. Возможно нужно сделать два столбца и пять элементов в нижней части... При этом возможно перейти с перевода страницы на локализацию. Для этого необходимо выбрать режим “Inheritance” (наследование), так как он дает необходимую гибкость. В основном, по умолчанию, структура для всех языков будет наследоваться, если не определена отличная для одного или нескольких языков.
Если же вы на самом деле радикал, и хотите, чтобы все страницы а разных языках имели бы собственную структуру, можно воспользоваться режимом “Separate” (разделения), но я считаю, что при этом лучше было бы отказаться от парадигмы локализации "все переводы в одном дереве страниц"! Если нужно радикальное отличие сайтов на разных языках, то лучше создать отдельный сайт для каждого из языков! Иначе вся эта тщательно продуманная техника локализации будет работать против вас.
Режим локализации элементов контейнеров ("свободная" парадигма)
Используя элементы контейнеры в "свободной" парадигме, имеет значение лишь выбор режима: “Inheritance” (наследование) или “Separate” (разделение).
Перевод каждой страницы строится посредством помещения элементов содержимого на выбранном языке в контейнер. Обычно локализации записи на языке по умолчанию пытаются разместить в отдельных структурах. Если модуль Страница из TemplaVoil? через TSconfig страницы имеет настройку “mod.web_txtemplavoilaM1.translationParadigm = free”, это будет поддерживаться, поскольку ссылка на локализацию записи не только создает локализацию, но и помещает ссылку в поле контейнера.
Режим локализации элементов контейнеров (дополнительные сведения для "свободной" парадигмы)
Далее приведено углубленное, с техническим уклоном описание.
Режим Separate (разделения):
В режиме локализации “Separate” (<langChildren>0</langChildren>) поля, содержащие ссылки на локализуемые элементы содержимого, отделены от полей для элементов содержимого на языке по умолчанию:

Это значит, что если нужно, чтобы элементы появились на датском, то нужно создать ссылки в полях для датского языка. Модуль Страница из TemplaVoil? поддерживает это при переключении на нужный язык в "Показать версию страницы на языке". Но опыт показывает, что пользователи удивляются, когда содержимого на датском не отображается! Это полезно только при построении отдельных структур элементов содержимого.
Поэтому режим локализации “Separate” для настраиваемых элементов содержимого (Flexible Content Elements) с полями контейнерами не рекомендуется.
В модуле Веб>TemplaVoil? все структуры данных с подобной проблемой помечены знаком предупреждения (если включено "Показать подробности" / "Show Details").

В модуле Страница из TemplaVoil? также будет выведено предупреждение:

Примечание: если включена "свободная" парадигма через “mod.web_txtemplavoilaM1.translationParadigm = free”, эти предупреждения удаляются, а ссылки на локализации создаются автоматически, что позволяет использовать этот режим, но не освобождает его от теоретических проблем.
Режим Inheritance (наследования):
В режиме локализации “Separate” (<langChildren>1</langChildren>) поля, содержащие ссылки на локализуемые элементы содержимого, связаны в полями для элементов содержимого на языке по умолчанию:

Так как по умолчанию включено наследование значений (серые стрелочки), это будет работать, так как значения также используются при формировании элементов на датском. Но, если пользователь добавляет связь с любым из полей на датском, то будет использовано значение из связанного поля (как и ожидалось), но TemplaVoil?  покажет это в своем модуле Страница только если выбран этот язык (в "Показать языковую версию страницы"). Это может ввести пользователей в заблуждение.
Здесь показано, как выглядит страница на языке по умолчанию:

А здесь выбран датский язык:


На сайте датской страницы появятся смешные сочетания, поскольку в левом столбце будет сформирован элемент  "Fusce adipiscing …", специально созданный для датского языка, в то время как в правом столбце будет наследуемая ссылка на элемент “Universal content”.
В модуле TemplaVoil? для элементов контейнеров в режиме “Inheritance” (наследование) будут показаны предупреждения:
Также как и в модуле Страница из TemplaVoil?:

При использовании “Inheritance” (наследования) для своих элементов контейнеров, можно убрать предупреждения через TSconfig страницы:
mod.web_txtemplavoilaM1.disableContainerElementLocalizationWarning_warningOnly = 1

Использовать “Inheritance” (наследование) в элементах контейнерах может понадобиться, если в них используются кроме того и обычные поля (например, заголовки столбцов), требующие локализации.
Примечание: если включена "свободная" парадигма через “mod.web_txtemplavoilaM1.translationParadigm = free”, эти предупреждения удаляются, а ссылки на локализации создаются автоматически, что позволяет использовать этот режим, но не освобождает его от теоретических проблем.
Режим Disabled:
В режиме локализации “Disabled” (<langDisable>1</langDisable>) поля со связями на локализуемые элементы содержимого не зависят от языка! Это значит, что связи всегда одни и те же — для языка по умолчанию, и отображаются в модуле Страница из TemplaVoil?, что устраняет возможность путаницы!
Это выглядит так:

В модуле TemplaVoil? никаких ошибок и предупреждений:

Примечание: если включена "свободная" парадигма через “mod.web_txtemplavoilaM1.translationParadigm = free”, локализация невозможна, так как "свободная" парадигма подразумевает построение раздельных структур для каждого из языков.
Работа с режимами “Inheritance” и “Separate” для элементов контейнеров
Если выбрана работа с режимами Inheritance и Separate для элементов контейнеров, для переключения между языками необходимо использовать блок "Показать языковую версию страницы" (доступно как для "связанной", так и для "свободной" парадигм):

Настройки наследования (Inheritance, специально для TemplaVoil?!)
Дополнительно можно изменить режим локализации “Inheritance” для форм. Можно полностью отключить наследование через свойство “dontInheritValueFromDefault” расширения tx_templavoila_pi1”. Для элементов содержимого это можно сделать таким образом:
plugin.tx_templavoila_pi1.dontInheritValueFromDefault = 1

И может быть использовано для шаблонов страниц TemplaVoil? обычно таким образом:
page.10.dontInheritValueFromDefault = 1
<langOverlayMode>
Еще более расширенным является тег “<langOverlayMode>”, применяющийся как в структурах данных, так и в локальной обработке объектов шаблонов.
При помощи этого тега можно установить такие режимы, как “ifFalse”, “ifBlank”, “never”, “removeIfBlank”. Последнее позволяет исключить отображение элементов определенного поля, если оно пустое, это дает некоторую гибкость, теряемую при использовании режима “Inheritance” в сравнении с “Separate”.
Дополнительную информацию по XML для структур данных можно получить из документации по TemplaVoil?.
Пример расширенного использования Inheritance
Здесь я покажу, как можно использовать <langOverlayMode> для создания нескольких объектов ссылок, отображаемых для такого Настраиваемого элемента содержимого (Flexible Content Element):

Для “<langOverlayMode>” будем использовать “removeIfBlank”, и применим его для поля “Link text”! Вот что при таких настройках происходит с каждой ссылкой:
Ссылка вверху: имеет содержимое на языке по умолчанию и на датском, будет, разумеется, показана.
Ссылка в середине: не имеет URL для содержимого на датском. Будет унаследовано с url по умолчанию (настройка по умолчанию, <langOverlayMode> не оказывает влияния).
Ссылка внизу: Нет содержимого “Link text” на датском, что повлияет на отображение всей ссылки целиком, так как  <langOverlayMode> настроено на “removeIfBlank” для поля “Link text”, и, согласно документации, это заблокирует формирование целой группы полей. 
Так будут выведены ссылки на сайте на языке по умолчанию:

А так — на датском. Разумеется последняя ссылка отсутствует:

Где устанавливать <langOverlayMode>?
Конечно можно установить его в структуре данных (СД, Data Structure / DS), но можно и объекте шаблона (ОШ), в поле "Локальная обработка". Это позволяет изменять настройки в зависимости от ОШ, сформированного на основе СД.
Поле "Местная обработка (XML):" выглядит так:
<T3DataStructure>
    <ROOT type="array">
        <el type="array">
            <field_links type="array">
                <el type="array">
                    <field_linkcontent type="array">
                        <el type="array">
                            <field_linktext type="array">
                                <tx_templavoila type="array">
                                    <langOverlayMode>removeIfBlank</langOverlayMode>
                                </tx_templavoila>
                            </field_linktext>
                        </el>
                    </field_linkcontent>
                </el>
            </field_links>
        </el>
    </ROOT>
</T3DataStructure>

Примечание: если используется "свободная" парадигма, использование режимов Inheritance или Separate в содержимых форм возможно только если тот же элементы используется в структуре содержимого на каждом из языков. Подобные проблемы и есть основное возражение против использования "свободной" парадигмы, так как легко возникает путаница.
Ограничение доступа к полям форм для переводчиков
Строго говоря это относится к разрешениям, но в этом контексте тоже интересно. Допустим, что необходимо ограничить переводчика только лишь полями “Link text” в приведенной выше форме, и запретить доступ к полям “Url”. Либо может понадобиться, чтобы поля для изображений наследовали изображения из языка по умолчанию, иначе переводчик может вставить неправильное изображение, если увидит пустое поле. Для этого можно использовать специальные условия для отображения полей для переводчиков в структуре данных:
<TCEforms type="array">
	<displayCond>HIDE_L10N_SIBLINGS:except_admin</displayCond>
	<config type="array">
		<type>input</type>
		<size>15</size>
		...
Фокус здесь в  условии “HIDE_L10N_SIBLINGS” и добавлении параметра “except_admin”, означающего, что пользователи администраторы увидят поля URL (и смогу, при необходимости, установить другие значения для них). Но любой другой пользователь (не администратор) увидит форму без полей Url:

Объекты шаблона локализации в TemplaVoil?
TemplaVoil? предлагает выбор альтернативных объектов шаблона (ОШ, Template Object / TO) при изменении языка. Все, что нужно для этого сделать — создать ОШ в виде "под-шаблона" для основного ОШ:


Конечно нужно выбрать правильный язык, а затем разметить ОШ как обычно.
В модуле Веб > TemplaVoil? появится под-шаблон, отображенный в связи с родительским:

Шаблон локализации выбирается на основе значения TSFE->sys_language_uid
Модуль Страница из TemplaVoil?
Модуль Страница в TemplaVoil? имеет вкладку для специфичных для локализации параметров:

“Показать версию языка”: определение языка, используемого для выбора из структуры данных формы. Обычно эффект виден на Настраиваемых элементах содержимого (Flexible Content Elements), где показывается предварительный просмотр на выбранном языке. 
Если имеется элемент контейнер с включенной локализацией, то возможна совсем другая композиция этой страницы (особенно в контексте "свободной" парадигмы)!
“Редактировать свойства страницы”: щелкните по флагу для редактирования свойств страницы / записи альтернативного языка страницы. Также показаны языки, на которых уже существует страница.
“Создать новую версию языка”: выберете язык, на которые страница еще не была переведена для начала работы над ее переводом!
Для "связанной" парадигмы, меню "Показать версию языка" позволяет провести дополнительную фильтрацию по количеству языков, отображаемых в общей структуре:
“Режим отображения”: позволяет переключаться для отображения элементов на всех языках, только на  выбранном в меню выше или уже переведенных. В первом случае можно получить представление обо всех переводимых элементах, во втором — сфокусироваться на переводе страницы или ее элементов, а в третьем — получить представление об уже сделанном переводе.
Режимы локализации для Структуры данных страницы ("связанная" парадигма)
Почти по определению, Структура данных страницы является "элементом контейнером", так как хотя бы одно поле может содержать элементы содержимого, иначе зачем нужна система управления содержимым.
Как и для Настраиваемых элементов содержимого (Flexible Content Elements), самый простой режим локализации - режим “Disabled” для структуры данных страницы. Это значит, что для элементов на всех языках будет использоваться одна и та же структура данных. Это режим "перевода", когда перевод следует за элементами на языке по умолчанию. В обсуждении Настраиваемых элементов содержимого (Flexible Content Elements) это было обозначено как парадигма "связанных элементов". В противовес ей создана "свободная" парадигма, по существу основанная на создании различных структур элементов содержимого для различных языков.
Парадигмы
Для описания различий в понятиях о локализации я выбрал слово "парадигма". В дискуссии предшествовавшей определению этих парадигм было сказано о сложности восприятия парадигм. Если Вы до сих пор не поняли как работает парадигма "связанного содержимого", выводящая страницы для всех языков по шаблону структуры элементов на "языке по умолчанию", то значит Вы пропустили такую особенность TYPO3, как "наложение содержимого" (“config.sys_language_overlay” в TypoScript). Эта небольшая особенность заключается в том, что при отображении страницы на русском, механизм формирования страницы сначала отбирает элементы страницы на языке по умолчанию, а затем ищет связанные с ними русские переводы. Если таковые находятся, то выводится содержимое на русском. Если эта особенность Вам не знакома, то конечно же парадигма "связанных элементов" кажется нелогичной.
Таким образом, в парадигме "связанных элементов" режим “Disabled” (отключено) позволяет создать единую структуру содержимого, используемую на всех языках.
Конечно же, можно выбрать другие режимы. Давайте испытаем режим “Inheritance” (наследование):
”Main Content Area” окажется пустой, здесь можно построить совершенно другую структуру для датского языка. Поскольку принцип наследования работает, эта структура будет использоваться только если поместить сюда ссылки на элементы содержимого, иначе будет использована структура на языке по умолчанию.
Использование режима локализации “Separate” (раздельного) приведет к тому же самому, за исключением того, что необходимо будет поместить сюда содержимое на датском языке, иначе страница будет пустой.

Disabled
Inheritance
Separate
Использование
Структура всех страниц должна быть одинакова.
По умолчанию все страницы будут иметь одну и ту же структуру, но переключившись на другой язык можно создать для него другую структуру.
Страницы на каждом языке построены по своему.
Оценка
Рекомендуется для большинства проектов.
Если необходима большая гибкость при локализации некоторых страниц, либо если Структура данных с полями контейнерами также должна нести определенное содержание, вроде фоновых изображений или текста заголовков.
Скорее всего Ван не нужен этот режим, только если не нужно, чтобы структура всех страниц на разных языках отличалась. Но Вы ничего не потеряете, используя “Inheritance”, только появится возможность использования содержимого на языке по умолчанию. Кроме того, если нужно, чтобы все страницы на разных языках отличались, то нужен ли подход "все языки в одном дереве страниц"? Может быть легче сделать разные языки в разных деревьях страниц?
Философия
Перевод один к одному.

Рекомендуется.
Перевод / локализация (настраивается)
Локализация (настраиваемая)
  
Элементы языков в режимах “Inheritance” и “Separate”
При построении раздельных структур элементов содержимого в режимах “Inheritance” или “Separate” для страницы или Настраиваемых элементов содержимого (FCE) контейнеров, строго нельзя этим элементам язык. Но по двум причинам это придется делать:
если нужен строгий доступ по определенному языку, необходимо установить для элемента определенный язык.
Если необходимо настроить шаблон TypoScript следующим образом “config.sys_language_overlay = hideNonTranslated” (рекомендуется) то вы ничего не увидите, за исключением того, если не дать элементам правильный язык!
Пример. Сначала приведен шаблон страницы на языке по умолчанию:


А так выглядит страница, если выбрать датский язык:

Обратите внимание, что структура страниц сильно отличается: на языке по умолчанию имеются два столбца, а для датской "локализации" — только один элемент содержимого, находящийся непосредственно в “Main Content Area”.
При нормальных обстоятельствах, в режиме локализации Структуры данных страницы “Disabled” (или “Inheritance”, но без добавления дополнительных элементов на датский вариант страницы) должно быть отображено следующее:

Причина, по которой на странице было выведено содержимое на датском, в том, что элементы на странице были локализованы один к одному (“config.sys_language_overlay” естественно установлено для того, чтобы на записи на языке по умолчанию были наложены записи с их локализациями):
элемент “FCE DS: Disabled”: элемент контейнер для создания двух столбцов. Установлен на универсальный язык "[все]" и, поэтому, выводится независимо от выбранного на сайте языка.
Элемент “Default language here...”:  обычный элемент содержимого типа "Текст", имеющий локализованную на датский версию. При формировании страницы отбирается запись на языке по умолчанию,  на которую затем накладывается датская локализация записи (так как “config.sys_language_overlay = 1”).
Элемент “Universal content”: Настраиваемый элемент содержимого (Flexible Content Element) со структурой данных для формы, в которой разрешена локализация (режим “Inheritance” или “Separate”), и, поэтому самому элементу назначен универсальный язык "[все]" — локализуемое содержимое встроено в данные самой формы.
Если режим локализации в Структуре данных установлен на “Disabled”, то модуле Страница не будет ни какой разницы при переключении в "Показать версию языка страницы" на Danish. 
Если режим локализации в Структуре данных установлен на “Inheritance” (наследование), то при переключении на Danish структура страницы будет пустой. Так как режим “Inheritance” и “Main Content Area” на датском пустая, страница на датском будет сформирована по структуре на языке по умолчанию. Но, как было показано выше, пустая структура страницы на датском может быть использована для создания при необходимости совершенно иной структуры перевода!  
Только что продемонстрированное — хорошая иллюстрация работы парадигмы "связанных элементов"! Обратите внимание, что локализованная страница была построена без необходимости создания отдельной структуры элементов для датского языка в “Main Content Area”, что происходит посредство связей локализаций с элементами на языке по умолчанию.
Добавление элементов только на одном языке
Так как для локализуемых сайтов, работающих на TemplaVoil?, используя парадигму "связанных элементов" необходимо использовать настройку “sys_language_overlay” (если не указана "свободная" парадигма для построения отдельных структур с режимом “Separate” для элементов контейнеров), имеется возможность помещать отдельные элементы на страницу для языков, на которые производится перевод:

Здесь показан датский элемент, не связанный с элементом на языке по умолчанию, а присутствующий на странице самостоятельно. Он будет показан только при выборе датского языка. Так для отображения языка по умолчанию будет выведено следующее:

На датском будет выведено это (обратите внимание на дополнительный элемент внизу):


Режимы “Disable”, “Inheritance” и “Separate” для контейнеров — тематическое исследование
Казалось бы, уже довольно сказано об этих режимах для элементов контейнеров, я не упущу шанса показать разницу относительно их использования для решения одной и той же задачи! Возможно на примере работа парадигмы "связанных элементов" станет понятнее.
Сначала взглянем, как выглядит сайт на языке по умолчанию и на датском. Это будет воспроизведено с использование трех разных подходов, представляющих "связанную" и "свободную" парадигмы.
Обычное отображение (язык по умолчанию):
Два элемента содержимого находятся рядом, при помощи двухколоночного элемента контейнера:

Выбираем "Датский"
На датском переведены два элемента содержимого и специально для датского добавлен третий элемент:


Теперь давайте посмотрим, как можно это сделать на TemplaVoil?, используя режимы локализации для двухколоночного элемента контейнера:
Режим “Disabled”  / “Связанная” парадигма:
Если режим локализации для контейнера установлен в “Disabled”, то для приведенного выше содержимого будет выведено следующее. Кроме того, в таблице указано, как формируется содержимое на английском и датском:
Показать версию языка страницы: “English” (по умолчанию):
Элемент [1] выведен, так как установлен язык "по умолчанию.
Элемент [2] выведен, так как установлен язык "[все]", универсальный.
Элементы [3] и [4] не выведены — для них установлен датский язык.


Показать версию языка страницы: “Danish”:
Структура страницы в модуле Страница для датского языка повторяет структуру на языке по умолчанию, так как для контейнерного элемента используется режим локализации “Disabled”, и все локализации обрабатываются в самих элементах:
Элемент [1] выбран, так как он имеет язык "по умолчанию", а TYPO3 ищет его локализованную версию (из-за настройки config.sys_language_overlay = 1) и находит элемент [3], который и выводится (возможно со слитыми в соответствие с l10n_mode полями)
Элемент [2] выводится, так как его язык установлен на "[все]", универсальный. Это Настраиваемый элемент содержимого (Flexible Content Element), и мы видим, что для его формы включена локализация, которая и обрабатывается элементом самостоятельно.
Элемент [3] выводится, так как для него установлен датский язык (он не выводится при отображении языка по умолчанию).

Режим “Inheritance” / типичная "свободная" парадигма:
При использовании режима “Inheritance” для элемента контейнера, для того же результата понадобится следующая структура:
Показать версию языка страницы: “English” (по умолчанию):

Элемент [5] выводится, так как для него установлен язык "по умолчанию".
Элемент [6] выводится, так как для него установлен язык "[все]", универсальный.
Показать версию языка страницы: “Danish”:
Для датского языка структура в модуле Страница отличается.

Столбец Left:
Элемент [7] предназначен для локализации элемента [5] из языка по умолчанию (обычно создается в контексте "свободной" парадигмы), но по сути — это просто несвязанная копия элемента с установленным датским языком (противоречие, этот элемент был бы настоящей локализованной версией элемента на языке по умолчанию, указывающим на него в поле “transOrigPointerField”. Но вот что происходит в "свободной" парадигме при щелчке по ссылке "Создать локализованную копию" в записи на языке по умолчанию.).
Элемент [8] это по существу элемент [4], который в режиме “Inheritance” был перемещен в датскую структуру.
Столбец Right [9]
Пустой, так как в режиме “Inheritance” он наследует содержимое с языка по умолчанию (=элемент [6]). Так как у элемента [6] установлены "[все]" языки, он также формируется на датском языке.
Интересно, что структура из режима “Disabled” также будет работать и в режиме “Inheritance”. Это дает большую гибкость, как я уже говорил, но может смутить пользователя, если он ее не понимает.
Режим “Separate” / только "свободная" парадигма:
в режиме “Separate” необходимо создать следующие структуры:
Показать версию языка страницы: “English” (по умолчанию):
Для языка по умолчанию структура не отличается от структуры в режиме “Inheritance”:
Элемент [10] выводится, так как имеет языковую установку “Default”.
Элемент [11] выводится, так как имеет настройку языка "[все]", универсальные.


Показать версию языка страницы: “Danish”:
Для датского структура почти та же, что и в режиме “Inheritance” выше, за исключением того, что имеются дубликаты (или ярлыки) элемента [14] в правом столбце, так как наследования в режиме “Separate” не существует.
Примечание: язык элементов [11] и [14] не обязательно должен быть "[все]", а может быть и по умолчанию и датским, соответственно для отображаемых языков.

Замечания:
для этого примера я использовал Настраиваемый элемент содержимого (Flexible Content Element) в качестве элемента контейнера, но ничего бы не изменилось, если бы Структура данных страницы сама имела два столбца (что встречается чаще).
Кроме того, в TSconfig страницы было отключено отображение предупреждений / ошибок, если режим локализации в элементах контейнерах был установлен на “Inheritance” или “Separate”: 
mod.web_txtemplavoilaM1.disableContainerElementLocalizationWarning = 1

И наконец, в записи шаблона TypoScrypt была установлена настройка “config.sys_language_overlay = 1”, чтобы разрешить использование наложения локализованных записей в режиме “Disabled”.
TemplaVoil?: лучшая практика
В приведенной таблице собраны практические рекомендации для локализации сайтов, использующих TemplaVoil?. Подразумевается, что используется парадигма "связанных элементов".
Тема
Рекомендации
Настройки шаблона TypoScript
Типовая общая настройка TypoScript для поддержки дополнительного языка (здесь "ru") выглядит так:

# Локализация:
config {
  linkVars = L
  sys_language_mode = content_fallback
  sys_language_overlay = hideNonTranslated
}

[globalVar = GP:L=1]
config {
  sys_language_uid = 1
  language = ru
  locale_all = ru_RU
}
[global]

Настройка “sys_language_overlay” по крайней мере на “1” для парадигмы "связанного содержимого" и TemplaVoil? обязательна (только сайты создающиеся на основе столбцов и "свободная" парадигма может обходится без этого), и, скорее всего, придется настроить на более строгий режим через ключевое слово “hideNonTranslated”, при этом на языке перевода будут выводится только переведенные записи.
Режим локализации Структуры данных страницы
Создайте шаблон страницы, использую мастер TemplaVoil?. Измените Структуру данных XML для режима локализации “Disabled”. Изредка понадобиться для локализации некоторых страниц  может потребоваться изменить структуру элементов содержимого, в этом случае лучше использовать режим “Inheritance”.

Держитесь подальше от режима “Separate”.
Режим локализации Структур данных Настраиваемых элементов (FCE)
Локализовать Настраиваемые элементы содержимого необходимо в соответствие с их характеристиками:

чистый элемент контейнер: используйте режим локализации “Disabled” (менее сложно);
чисто иерархическое содержимое: используйте режим локализации “Inheritance” (менее сложно, больше возможностей);
смесь контейнеров и содержимого: используйте режим локализации “Inheritance” (не так сложно).

Держитесь подальше от режима “Separate”.

В настройках языка для Настраиваемых элементов содержимого всегда используйте "[все]"! Смотрите ниже.
“[все]” языки?
Если "sys_language_overlay" в шаблоне страницы TS настроено на "hideNonTranslated", становится критичным устанавливать для всех "многоязычных" записей, вроде Настраиваемых элементов содержимого, язык на "[все]", иначе они не будут отображены на страницах переводов. 

В общем следующие типы элементов содержимого должны использовать "[все]" языки:
"Вставить дополнение";
"Вставить записи" (и связать с записями на языке по умолчанию!);
"Настраиваемые элементы содержимого" (локализуются самостоятельно через формы).

Язык "[все]" устанавливается в поле “languageField” записи элементов содержимого:

В модуле Страница для TemplaVoil? это хорошо видно по значку флага:


TemplaVoil?: технология для переводчика
Ограничивая пользователей по языкам, вы фактически распределяете роли переводчиков. Это может иметь приятный эффект в плане упрощения интерфейса TYPO3. Одной из таких настроек является использование условий в формах “HIDE_L10N_SIBLINGS” (поищите где-нибудь).
Еще одна выгода состоит в том, что модуль Страница из TemplaVoil? сократит количество кнопок для пользователя, не имеющего доступ к языку по умолчанию (подразумевается, что это переводчик). Это работает без дополнительных настроек:
Переводчики (с доступом лишь к альтернативным языкам):
Обратите внимание, что количество кнопок сократилось. Нет даже ссылок в контекстном меню значков элементов, и текст не кликабельный. Переводчику всего этого не нужно, все что ему нужно — ссылки для перевода содержимого.

Пользователи с доступом к языку по умолчанию:
Это обычный вид модуля Страница для TemplaVoil?. Здесь видны дополнительные кнопки.

Идея упрощенного интерфейса для переводчика выражается следующим правилом: "Щелкни по флагу!". Все ссылки со значков флага ведут либо к созданию записи локализации для элемента, либо к редактированию существующей записи локализации для элемента. Путаница невозможна.

Еще одна особенность заключается в том, что значок просмотра страницы посылает в ссылке параметр &L в соответствие с выбранным языком:

Выбрав датский, к URL для предварительного просмотра страницы автоматически будет добавлен параметр “&L=xx”:

Поддержка локализации со стороны ядра
TCA, TCEmain, TCEforms
Поддержка локализации со стороны ядра TYPO3 основана на схеме, когда запись на языке по умолчанию (0) может иметь другие записи, указывающие на нее и представляющие перевод ее содержимого. Это, в свою очередь, предъявляет следующие требования к таблице для таких записей:
1. должно быть определено поле, содержащее ссылку на системный язык (таблица sys_language);
2. должно быть определено поле, содержащее ссылку на запись на языке по умолчанию.
Оба этих поля определяются для таблицы в разделе [ctrl] массива TCA.
[languageField]
Первое поле (со ссылкой на язык записи) определяется как [languageField]. Значение этого поля кроме того используется для контроля доступа к локализованному содержимому (смотрите позже).
Настройка [columns] для этого поля может быть такой:
'sys_language_uid' => Array (
    'exclude' => 1,
    'label' => 'LLL:EXT:lang/locallang_general.php:LGL.language',
    'config' => Array (
        'type' => 'select',
        'foreign_table' => 'sys_language',
        'foreign_table_where' => 'ORDER BY sys_language.title',
        'items' => Array(
            Array('LLL:EXT:lang/locallang_general.php:LGL.allLanguages',-1),
            Array('LLL:EXT:lang/locallang_general.php:LGL.default_value',0)
        )
    )
),
Обратите внимание как включены два статических элемента для языков “Default” и "[все]".
[transOrigPointerField]
Второе поле (со ссылкой на запись на языке по умолчанию) определяется как [transOrigPointerField]. 
Настройка для этого поля может быть такой:
'l18n_parent' => Array (
    'displayCond' => 'FIELD:sys_language_uid:>:0',
    'exclude' => 1,
    'label' => 'LLL:EXT:lang/locallang_general.php:LGL.l18n_parent',
    'config' => Array (
        'type' => 'select',
        'items' => Array (
            Array('', 0),
        ),
        'foreign_table' => 'tt_content',
        'foreign_table_where' => 'AND tt_content.pid=###CURRENT_PID### AND tt_content.sys_language_uid IN (-1,0)',
    )
),
Пример взять из таблицы “tt_content”, настройки “foreign_table” должны быть выставлены соответствующим образом разумеется и для других таблиц!
Обратите внимание на выставленные для поля условия отображения: оно будет искать значение поля sys_language_uid, и появится только тогда, когда оно больше нуля (для записи определен язык).
Другой интересный момент, поиск записи на языке по умолчанию проводится только на текущей pid (странице). Это значит, что запись на языке по умолчанию и все ее переводы должны находится на одной странице! Этот принцип также соблюдается в функции API t3lib_page::getRecordOverlay(), получающей переводы записей для отображения во внешнем интерфейсе (при “config.sys_language_overlay = 1 / hideNonTranslated”)!
Когда для таблицы определены “transOrigPointerField” и “languageField”, будет получено замечательное представление содержимого по умолчанию, отображаемого вместе с переводом в формах TCEforms:

Не обязательные поля
Имеются и не обязательные поля, которые можно задействовать для поддержки локализации. Одно из них — [transOrigDiffSourceField]. Оно может указывать на blob поле в записи, хранящее содержимое записи на языке по умолчанию на момент создания перевода. Оно может использоваться для отображения любых изменений, внесенных в запись по умолчанию с момента создания перевода. В элементах содержимого (таблица tt_content) это выглядит так:

Это позволяет переводчикам сразу увидеть изменения в оригинале и подправить свой перевод.
Команды для локализации в TCEmain
Локализация записей производится через команду “localize”, посланную в массиве cmd в TCEmain. Это описано в “TYPO3 Core API”. Эта команда отсылается по нажатии кнопки локализовать в модулях Веб>Список или Веб>Страница для элемента.
По этой команде производится обычное копирование, но с соответствующим обновлением полей “languageField” и “transOrigPointerField”.
Локализовать можно лишь записи, которые пока еще не локализованы, и имеющие установку для языка "по умолчанию" или "[все]". 
Установка "[все]" предназначена для элементов, представляющий универсальное содержимое, не нуждающееся в переводе (вроде вставленного дополнения или других записей). Но они все еще могут быть локализованы, если возникнет необходимость.
Можно вручную создать несколько локализаций для одной записи, но это приведет к ошибке в системе, хотя и не фатальной, но результаты ее непредсказуемы.
Параметры команды локализации для поля
Если команда локализации выполняется из TCEmain, настройка каждого поля может иметь специальные инструкции. Например, может быть метка, служащая приставкой к полю (вроде "[Перевод на русский:]" на некоторых иллюстрациях), или отключение копирования всех полей (вроде поля для изображения, если в нем всегда нужно наследовать значение по умолчанию).
Это производится через настройку [columns][l10n_mode], о которой рассказывается в “TYPO3 Core API”.
“l10n_mode” не применимо к полям форм (FlexForm). Это не имеет смысла в принципе.
Права доступа
Для всех внутренних пользователей и их групп можно определить языки, которые они могут редактировать (эксклюзивно). Права распространяются на все таблицы с установленными полями [languageField]. 

Настройки для вложенных групп складываются с настройками для родительских групп.
Если у пользователя совсем не установлены флажки "Привязать к языкам", то он может редактировать все языки.
Независимо от настройки "Привязать к языкам", все пользователи могут редактировать записи с настройкой языка "[все]".
Настройка  "Привязать к языкам" является не только хорошей защитой от редактирования переводчиками записей на других языках или на языке по умолчанию, но и заметно упрощает интерфейс, например пользователя может смутить список записей, включающий локализации на 10 языках, в модуле Веб>Список!
Используйте модуль Сервис управления > Управление пользователями для просмотра ограничений:

Расширения
Имеется несколько расширений о которых хотелось бы упомянуть в контексте локализации.
realurl
Realurl отвечает за создание понятных для человека URL. Вроде “mysite.com/products/” или “mysite.com/ru/products/”.
Если нужно, чтобы realurl перевел переменную &L в URL, следующая настройка будет работать:
   1: $TYPO3_CONF_VARS['EXTCONF']['realurl'] = array(
   2:     '_DEFAULT' => array(
   3:         'preVars' => array(
   4:             array(
   5:                 'GETvar' => 'L',
   6:                 'valueMap' => array(
   7:                     'danish' => 1,
   8:                     'dk' => 1,
   9:                     'ru' => 2,
  10:                 ),
  11:                 'noMatch' => 'bypass'
  12:             )
  13:         ),
  14:         'pagePath' => array(
  15:             'type' => 'user',
  16:             'userFunc' => 'EXT:realurl/class.tx_realurl_advanced.php:&tx_realurl_advanced->main',
  17:             'spaceCharacter' => '-',
  18:             'expireDays' => 3,
  19:         ),
  20:     )
  21: );
Важными здесь являются строки 4-12 где размечается GET переменная “L” в соответствующее строковое значение. Как видно, строки “dk” или “ru” соответствуют значениям переменной L 1 и 2, соответственно. Кроме того, видно, что для датского может быть использовано альтернативное значение “danish”.
Настройка “noMatch” означает, что если в первом сегменте пути URL нет “dk”, “ru” или “danish”, то продолжается декодирование пути для id страницы и другим оставшимся переменным.
При этом возникает интересный эффект, если в дереве страниц создать страницу с названием “Danish”, то доступа к ней на языке по умолчанию получить будет невозможно! Причина в том, что если попытаться перейти к странице  “/danish/”, то “danish” будет расценено как “&L=1” а для декодирования id страницы ничего не останется!
В следующей таблице показана разметка “L” в realurl
Без realurl:
С realurl:
index.php?id=22&L=0
products/
index.php?id=22&L=1
dk/products/
index.php?id=22&L=2
ru/products/

Обратите внимание, что добавив новый язык к сайту, необходимо будет соответственно обновить настройку realurl!
rlmp_language_detection
Это расширение может быть включено в шаблон для перенаправления пользователей сайта на соответствующий язык, взятый из настроек их браузера
Не забудьте настроить код языка по умолчанию в TS расширения.
l10nmgr
Это расширение добавляет модуль для управления импортом / экспортом локализации, а также организации процесса перевода из внутреннего интерфейса TYPO3 или вне его при помощи сторонних средств (вроде across, D?j?Vu, MemoQ, SDL TRADOS TagEditor, SDL PASSOLO)  и последующего импорта переведенных данных.
Список для реализации возможностей локализации
TYPO3 имеет почти полный набор возможностей для локализации. Но все еще остается подправить предварительный просмотр и рабочий процесс.
